######---------Shell Scripting Tutorial for Beginners 1 - Introduction------####
who to see working on which shell command : cat/etc/shells
 To get the location of your bash . Command : $which bash
 ######--------Shell Scripting Tutorial for Beginners 2 - using Variables and Comments-------######
In Linux (Shell), there are two types of variable:
(1) System variables - Created and maintained by Linux itself. This type of variable defined in CAPITAL LETTERS.
(2) User defined variables (UDV) - Created and maintained by user. This type of variable defined in lower letters.
Shell variables 
- var refers to the name, $var to the value
    - t = 100  #Sets var t to value 100
    - echo ”\$t = $t” #will print: $t = 100
- Remove a variable with unset var
- Names begin with alpha characters and include alpha, numeric, or underscore
#-------------Shell Scripting Tutorial for Beginners 3 - Read User Input----------####################
Read command - The read command allows you to prompt for input and store it in a variable. shell allows to prompt for user input.
Syntax: 
read varname [more vars] 
or
read –p "prompt" varname [more vars]
words entered by user are assigned to varname and “more vars”
last variable gets rest of input line.
#!/bin/bash
echo "Enter name : "
read name
echo "Enterd name : $name"
#!/bin/bash
echo "Enter name : "
read name1 name2 name3
echo "Enterd name : $name1 , $name2 , $name3"
#!/bin/bash
read -p 'username : ' user_var  ## -p cammand use for user input in same line to take user input in same line
echo "username : $user_var"
#!/bin/bash
read -p 'username : ' user_var
read -sp 'password : ' pass_var   # -sp use for silent user input did not show on the terminal
echo
echo "username : $user_var"
echo "password : $pass_var"
#!/bin/bash
echo "Enter names : "
read -a names   #  read -a command use for array to take all user input in one veriable
echo "Names : ${names[0]}, ${names[1]}, ${names[2]}"
#!/bin/bash
echo "Enter names : "
read    
echo "Names : $REPLY"  # REPLY command use for we did not need to give a variable why because the reply involve command take variable and store in reply is defalut variablr
#########-----------Shell Scripting Tutorial for Beginners 4 - Pass Arguments to a Bash-Script------###########
Passing arguments to a shell script
Any shell script you run has access to (inherits) the environment variables accessible to its parent shell. In addition, any arguments you type after the script name on the shell command line are passed to the script as a series of variables.
The following parameters are recognized:
$*
Returns a single string (``$1, $2 ... $n'') comprising all of the positional parameters separated by the internal field separator character (defined by the IFS environment variable).
$@
Returns a sequence of strings (``$1'', ``$2'', ... ``$n'') wherein each positional parameter remains separate from the others.
$1, $2 ... $n
Refers to a numbered argument to the script, where n is the position of the argument on the command line. In the Korn shell you can refer directly to arguments where n is greater than 9 using braces. For example, to refer to the 57th positional parameter, use the notation ${57}. In the other shells, to refer to parameters with numbers greater than 9, use the shift command; this shifts the parameter list to the left. $1 is lost, while $2 becomes $1, $3 becomes $2, and so on. The inaccessible tenth parameter becomes $9 and can then be referred to.
$0
Refers to the name of the script itself.
$#
Refers to the number of arguments specified on a command line.
#!bin/bash
echo $0 $1 $2 $3 ' > echo $1 $2 $3'
args=("$@")
#echo ${args[0]} ${args[1]} ${args[2]} ${args[3]}
echo $@  #  this command ($@) all those argument will be saved inside this default variable 
echo $#   # this command ($#) use print number of argument we give to terminal  # refers to the number of argument specified on a command line
###########-------------------Shell Scripting Tutorial for Beginners 5 - If Statement ( If then , If then else, If elif else)-------------
For more detailed Tutorial visit - https://goo.gl/vn9xIb
Conditionals let us decide whether to perform an action or not, this decision is taken by evaluating an expression.
Expressions 
An expression can be: String comparison, Numeric comparison, File operators and Logical operators and it is represented by [expression]:
String Comparisons:  
---------------------------------
Conditional Statements
Conditionals let us decide whether to perform an action or not, this decision is taken by evaluating an expression. The most basic form is:
      if [ expression ];
                                      
      then

            statements

      elif [ expression ];

      then

            statements

      else

            statements

      fi
the elif (else if) and else sections are optional
Put spaces after [ and before ], and around the operators and operands.
Expressions
An expression can be: String comparison, Numeric comparison, File operators and Logical operators and it is represented by [expression]:
Number Comparisons:
-eq - is equal to - if [ "$a" -eq "$b" ]
-ne - is not equal to - if [ "$a" -ne "$b" ]
-gt - is greater than - if [ "$a" -gt "$b" ]
-ge - is greater than or equal to - if [ "$a" -ge "$b" ]
-lt - is less than - if [ "$a" -lt "$b" ]
-le - is less than or equal to - if [ "$a" -le "$b" ]
< - is less than - (("$a" < "$b"))
<= - is less than or equal to - (("$a" <= "$b"))
> - is greater than - (("$a" > "$b"))
>= - is greater than or equal to - (("$a" >= "$b"))
Examples:
[ n1 -eq n2 ]  (true if n1 same as n2, else false)
[ n1 -ge n2 ]  (true if n1greater then or equal to n2, else false)
[ n1 -le n2 ]  (true if n1 less then or equal to n2, else false)
[ n1 -ne n2 ]  (true if n1 is not same as n2, else false)
[ n1 -gt n2 ]  (true if n1 greater then n2, else false)
[ n1 -lt n2 ]  (true if n1 less then n2, else false)
String Comparisons:
= - is equal to - if [ "$a" = "$b" ]
== - is equal to - if [ "$a" == "$b" ]
!= - is not equal to - if [ "$a" != "$b" ]
< - is less than, in ASCII alphabetical order - if [[ "$a" < "$b" ]]
> - is greater than, in ASCII alphabetical order - if [[ "$a" > "$b" ]]
-z - string is null, that is, has zero length
Examples:
[ s1 = s2 ]  (true if s1 same as s2, else false)
[ s1 != s2 ]  (true if s1 not same as s2, else false)
[ s1 ]   (true if s1 is not empty, else false)
[ -n s1 ]   (true if s1 has a length greater then 0, else false)
[ -z s2 ]   (true if s2 has a length of 0, otherwise false)
#!/bin/bash

      echo -n “Enter a number 1 < x < 10: "

      read num

      if [ “$num” -lt 10 ]; then

            if [ “$num” -gt 1 ]; then

                  echo “$num*$num=$(($num*$num))”

            else

                  echo “Wrong insertion !”

            fi

      else

            echo “Wrong insertion !”

      fi
string.sh

#! /bin/bash

word=a

if  [[ $word == "b" ]]
then
  echo "condition b is true"
elif [[ $word == "a" ]]
then 
  echo "condition a is true" 
else
  echo "condition is false"    
fi
#!/bin/bash
if [ condition ]
then
  statement
fi
#!/bion/bash
count=10
if [ $count -eq 10 ]
then
  echo "condition is true"
fi
#!/bin/bash
count=10
if [ $count -gt 9 ]
then
  echo "condition is true"
fi
#!/bin/bash
count=10
if [ $count > 9 ]
then
  echo "condition is true"
fi
#!/bin/bash
count=10
if (( $count > 9 ))
then
  echo "condition is true"
fi
#!/bin/bash   #!----string comparisons-------!#
word=abc      
if [ $word == "abc" ]
then
  echo "condition is true"
fi
#!/bin/bash
word=a   #
if [[ $word < "b" ]]
then
  echo "condition is true"
fi
#!/bin/bash
word=a
if [[ $word == "b" ]]
then
  echo "condition is true"
else
  echo "condition is fales"
fi
#!/bin/bash
word=a
if [[ $word == "b" ]]
then
  echo "condition b is true"
elif [[ $word == "a" ]]
then
  echo "condition a is true"
else
  echo "condition is fales"
fi
#########------------------Shell Scripting Tutorial for Beginners 6 - File test operators---------########
Shell Script has many operators that you can use to test different aspects of a file. For example, you can use the -e operator to ensure that a file exists before deleting it. Or, you can check that a file can be written to before appending to it. By checking the feasibility of the impending file operation, you can reduce the number of errors that your program will encounter.
echo -e "Enter the name of the file : \c"
read file_name
if [ -e $file_name ]
then
  echo "$file_name found"
 else
  echo "$file_name not found"
fi
#!/bin/bash
echo -e "Enter the name of the file : \c"
read file_name
if [ -s $file_name ]
then
  echo "$file_name not empty"
 else
  echo "$file_name empty"
fi
#######-------------------------Shell Scripting Tutorial for Beginners 7 - How to append output to the end of text file
#!/bin/bash
In this video we will see how to How to append string/data to a file in Linux. Using our knowledge we have gained in the last two lessons we will see how to Append and Insert Lines to a File using bash script.
#!/bin/bash
echo -e "Enter the name of the file : \c"
read file_name
if [ -f $file_name ]
then
       if [ -w $file_name ]
       then
          echo "type some text data. to quit press ctrl+d."
          cat >> $file_name
       else
          echo "The file do not have write permission"
       fi
else
 echo "$file_name not exits"
fi
#######-----------------Shell Scripting Tutorial for Beginners 8 - Logical 'AND' Operator------------
The Logical AND "&&" is a boolean operator that executes following commands based on the outcome of previously executed commands. 
Logical AND (&&) if [[expr1 && expr2]] Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if both operands are true; otherwise, returns false.
- for using And operator use &&
if [ "$age" -gt 18] && ["$age" -lt 30 ]
- The -a option provide an alternative compound condition test.
if [ "$age" -gt 18 -a "$age" -lt 30 ]
- if [[ $condition1 && $condition2 ]]    # Also works.
if [[ "$age" -gt 18 && "$age" -lt 30 ]]
#!/bin/bash
age=25
if [ "$age" -gt 18 ] && [ "$age" -lt 30 ] (or) [ "$age" -gt 18 && "$age" -lt 30 ] (or) [[ "$age" -gt 18 && "$age" -lt 30 ]]
then
   echo "valut age"
   else
   echo "age not valid"
fi
##########-------------------Shell Scripting Tutorial for Beginners 9 - Logical 'OR' Operator-----------------------
The Logical OR "||" is a boolean operator that executes following commands based on the outcome of previously executed commands. 
Logical OR (||) if [[expr1 ||expr2]] Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if one operands are true; otherwise, returns false.
- for using And operator use ||
if [ "$age" -gt 18] || ["$age" -lt 30 ]
- The -o option provide an alternative compound condition test.
if [ "$age" -gt 18 -o "$age" -lt 30 ]
- if [[ $condition1 || $condition2 ]]    # Also works.
if [[ "$age" -gt 18 || "$age" -lt 30 ]]
#!/bin/bash
age=60
if [ "$age" -gt 18 ] || [ "$age" -lt 30 ]
then
   echo "valut age"
   else
   echo "age not valid"
fi
##########---------------shell scripting tutorial for beginners 10 -Perform arithmetic operations---------------













































































































#########-------------------------------



















 
