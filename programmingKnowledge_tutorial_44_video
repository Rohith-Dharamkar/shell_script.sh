######---------Shell Scripting Tutorial for Beginners 1 - Introduction------####
who to see working on which shell command : cat/etc/shells
 To get the location of your bash . Command : $which bash
 ######--------Shell Scripting Tutorial for Beginners 2 - using Variables and Comments-------######
In Linux (Shell), there are two types of variable:
(1) System variables - Created and maintained by Linux itself. This type of variable defined in CAPITAL LETTERS.
(2) User defined variables (UDV) - Created and maintained by user. This type of variable defined in lower letters.
Shell variables 
- var refers to the name, $var to the value
    - t = 100  #Sets var t to value 100
    - echo ”\$t = $t” #will print: $t = 100
- Remove a variable with unset var
- Names begin with alpha characters and include alpha, numeric, or underscore
#-------------Shell Scripting Tutorial for Beginners 3 - Read User Input----------####################
Read command - The read command allows you to prompt for input and store it in a variable. shell allows to prompt for user input.
Syntax: 
read varname [more vars] 
or
read –p "prompt" varname [more vars]
words entered by user are assigned to varname and “more vars”
last variable gets rest of input line.
#!/bin/bash
echo "Enter name : "
read name
echo "Enterd name : $name"
#!/bin/bash
echo "Enter name : "
read name1 name2 name3
echo "Enterd name : $name1 , $name2 , $name3"
#!/bin/bash
read -p 'username : ' user_var  ## -p cammand use for user input in same line to take user input in same line
echo "username : $user_var"
#!/bin/bash
read -p 'username : ' user_var
read -sp 'password : ' pass_var   # -sp use for silent user input did not show on the terminal
echo
echo "username : $user_var"
echo "password : $pass_var"
#!/bin/bash
echo "Enter names : "
read -a names   #  read -a command use for array to take all user input in one veriable
echo "Names : ${names[0]}, ${names[1]}, ${names[2]}"
#!/bin/bash
echo "Enter names : "
read    
echo "Names : $REPLY"  # REPLY command use for we did not need to give a variable why because the reply involve command take variable and store in reply is defalut variablr
#########-----------Shell Scripting Tutorial for Beginners 4 - Pass Arguments to a Bash-Script------###########
Passing arguments to a shell script
Any shell script you run has access to (inherits) the environment variables accessible to its parent shell. In addition, any arguments you type after the script name on the shell command line are passed to the script as a series of variables.
The following parameters are recognized:
$*
Returns a single string (``$1, $2 ... $n'') comprising all of the positional parameters separated by the internal field separator character (defined by the IFS environment variable).
$@
Returns a sequence of strings (``$1'', ``$2'', ... ``$n'') wherein each positional parameter remains separate from the others.
$1, $2 ... $n
Refers to a numbered argument to the script, where n is the position of the argument on the command line. In the Korn shell you can refer directly to arguments where n is greater than 9 using braces. For example, to refer to the 57th positional parameter, use the notation ${57}. In the other shells, to refer to parameters with numbers greater than 9, use the shift command; this shifts the parameter list to the left. $1 is lost, while $2 becomes $1, $3 becomes $2, and so on. The inaccessible tenth parameter becomes $9 and can then be referred to.
$0
Refers to the name of the script itself.
$#
Refers to the number of arguments specified on a command line.
#!bin/bash
echo $0 $1 $2 $3 ' > echo $1 $2 $3'
args=("$@")
#echo ${args[0]} ${args[1]} ${args[2]} ${args[3]}
echo $@  #  this command ($@) all those argument will be saved inside this default variable 
echo $#   # this command ($#) use print number of argument we give to terminal  # refers to the number of argument specified on a command line
###########-------------------Shell Scripting Tutorial for Beginners 5 - If Statement ( If then , If then else, If elif else)-------------
For more detailed Tutorial visit - https://goo.gl/vn9xIb
Conditionals let us decide whether to perform an action or not, this decision is taken by evaluating an expression.
Expressions 
An expression can be: String comparison, Numeric comparison, File operators and Logical operators and it is represented by [expression]:
String Comparisons:  
---------------------------------
Conditional Statements
Conditionals let us decide whether to perform an action or not, this decision is taken by evaluating an expression. The most basic form is:
      if [ expression ];
                                      
      then

            statements

      elif [ expression ];

      then

            statements

      else

            statements

      fi
the elif (else if) and else sections are optional
Put spaces after [ and before ], and around the operators and operands.
Expressions
An expression can be: String comparison, Numeric comparison, File operators and Logical operators and it is represented by [expression]:
Number Comparisons:
-eq - is equal to - if [ "$a" -eq "$b" ]
-ne - is not equal to - if [ "$a" -ne "$b" ]
-gt - is greater than - if [ "$a" -gt "$b" ]
-ge - is greater than or equal to - if [ "$a" -ge "$b" ]
-lt - is less than - if [ "$a" -lt "$b" ]
-le - is less than or equal to - if [ "$a" -le "$b" ]
< - is less than - (("$a" < "$b"))
<= - is less than or equal to - (("$a" <= "$b"))
> - is greater than - (("$a" > "$b"))
>= - is greater than or equal to - (("$a" >= "$b"))
Examples:
[ n1 -eq n2 ]  (true if n1 same as n2, else false)
[ n1 -ge n2 ]  (true if n1greater then or equal to n2, else false)
[ n1 -le n2 ]  (true if n1 less then or equal to n2, else false)
[ n1 -ne n2 ]  (true if n1 is not same as n2, else false)
[ n1 -gt n2 ]  (true if n1 greater then n2, else false)
[ n1 -lt n2 ]  (true if n1 less then n2, else false)
String Comparisons:
= - is equal to - if [ "$a" = "$b" ]
== - is equal to - if [ "$a" == "$b" ]
!= - is not equal to - if [ "$a" != "$b" ]
< - is less than, in ASCII alphabetical order - if [[ "$a" < "$b" ]]
> - is greater than, in ASCII alphabetical order - if [[ "$a" > "$b" ]]
-z - string is null, that is, has zero length
Examples:
[ s1 = s2 ]  (true if s1 same as s2, else false)
[ s1 != s2 ]  (true if s1 not same as s2, else false)
[ s1 ]   (true if s1 is not empty, else false)
[ -n s1 ]   (true if s1 has a length greater then 0, else false)
[ -z s2 ]   (true if s2 has a length of 0, otherwise false)
#!/bin/bash

      echo -n “Enter a number 1 < x < 10: "

      read num

      if [ “$num” -lt 10 ]; then

            if [ “$num” -gt 1 ]; then

                  echo “$num*$num=$(($num*$num))”

            else

                  echo “Wrong insertion !”

            fi

      else

            echo “Wrong insertion !”

      fi
string.sh

#! /bin/bash

word=a

if  [[ $word == "b" ]]
then
  echo "condition b is true"
elif [[ $word == "a" ]]
then 
  echo "condition a is true" 
else
  echo "condition is false"    
fi
#!/bin/bash
if [ condition ]
then
  statement
fi
#!/bion/bash
count=10
if [ $count -eq 10 ]
then
  echo "condition is true"
fi
#!/bin/bash
count=10
if [ $count -gt 9 ]
then
  echo "condition is true"
fi
#!/bin/bash
count=10
if [ $count > 9 ]
then
  echo "condition is true"
fi
#!/bin/bash
count=10
if (( $count > 9 ))
then
  echo "condition is true"
fi
#!/bin/bash   #!----string comparisons-------!#
word=abc      
if [ $word == "abc" ]
then
  echo "condition is true"
fi
#!/bin/bash
word=a   #
if [[ $word < "b" ]]
then
  echo "condition is true"
fi
#!/bin/bash
word=a
if [[ $word == "b" ]]
then
  echo "condition is true"
else
  echo "condition is fales"
fi
#!/bin/bash
word=a
if [[ $word == "b" ]]
then
  echo "condition b is true"
elif [[ $word == "a" ]]
then
  echo "condition a is true"
else
  echo "condition is fales"
fi
#########------------------Shell Scripting Tutorial for Beginners 6 - File test operators---------########
Shell Script has many operators that you can use to test different aspects of a file. For example, you can use the -e operator to ensure that a file exists before deleting it. Or, you can check that a file can be written to before appending to it. By checking the feasibility of the impending file operation, you can reduce the number of errors that your program will encounter.
echo -e "Enter the name of the file : \c"
read file_name
if [ -e $file_name ]
then
  echo "$file_name found"
 else
  echo "$file_name not found"
fi
#!/bin/bash
echo -e "Enter the name of the file : \c"
read file_name
if [ -s $file_name ]
then
  echo "$file_name not empty"
 else
  echo "$file_name empty"
fi
#######-------------------------Shell Scripting Tutorial for Beginners 7 - How to append output to the end of text file
#!/bin/bash
In this video we will see how to How to append string/data to a file in Linux. Using our knowledge we have gained in the last two lessons we will see how to Append and Insert Lines to a File using bash script.
#!/bin/bash
echo -e "Enter the name of the file : \c"
read file_name
if [ -f $file_name ]
then
       if [ -w $file_name ]
       then
          echo "type some text data. to quit press ctrl+d."
          cat >> $file_name
       else
          echo "The file do not have write permission"
       fi
else
 echo "$file_name not exits"
fi
#######-----------------Shell Scripting Tutorial for Beginners 8 - Logical 'AND' Operator------------
The Logical AND "&&" is a boolean operator that executes following commands based on the outcome of previously executed commands. 
Logical AND (&&) if [[expr1 && expr2]] Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if both operands are true; otherwise, returns false.
- for using And operator use &&
if [ "$age" -gt 18] && ["$age" -lt 30 ]
- The -a option provide an alternative compound condition test.
if [ "$age" -gt 18 -a "$age" -lt 30 ]
- if [[ $condition1 && $condition2 ]]    # Also works.
if [[ "$age" -gt 18 && "$age" -lt 30 ]]
#!/bin/bash
age=25
if [ "$age" -gt 18 ] && [ "$age" -lt 30 ] (or) [ "$age" -gt 18 && "$age" -lt 30 ] (or) [[ "$age" -gt 18 && "$age" -lt 30 ]]
then
   echo "valut age"
   else
   echo "age not valid"
fi
##########-------------------Shell Scripting Tutorial for Beginners 9 - Logical 'OR' Operator-----------------------
The Logical OR "||" is a boolean operator that executes following commands based on the outcome of previously executed commands. 
Logical OR (||) if [[expr1 ||expr2]] Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if one operands are true; otherwise, returns false.
- for using And operator use ||
if [ "$age" -gt 18] || ["$age" -lt 30 ]
- The -o option provide an alternative compound condition test.
if [ "$age" -gt 18 -o "$age" -lt 30 ]
- if [[ $condition1 || $condition2 ]]    # Also works.
if [[ "$age" -gt 18 || "$age" -lt 30 ]]
#!/bin/bash
age=60
if [ "$age" -gt 18 ] || [ "$age" -lt 30 ]
then
   echo "valut age"
   else
   echo "age not valid"
fi
##########---------------shell scripting tutorial for beginners 10 -Perform arithmetic operations---------------
The Arithmetic expression is very important feature for performing number arithmetic operations in scripts.
By default variables are treated as strings in bash scripts.
But parsing a string to numbers is very easy using double parentheses and external command such as expr.

Arithmetic operations in Bash Shell
Arithmetic operations can be done on integers using the following methods

$(( expression ))
echo "Addition = $(( number_1 + number_2 ))"

expr — evaluate expression
we can also use expr command to perform Arithmetic operations on numbers.

echo "Addition = $(expr  $number_1 + $number_2 )"
Linux-Command-Line-Tutorial
The Arithmetic expression is very important feature for performing number arithmetic operations in scripts.
By default variables are treated as strings in bash scripts.
But parsing a string to numbers is very easy using double parentheses and external command such as expr.

Arithmetic operations in Bash Shell
Arithmetic operations can be done on integers using the following methods

$(( expression ))

Example:
Run the following commands on terminal:

 $ number_1=20
 $ number_2=5
 $ echo $(( number_1 + number_2 ))
 $ echo $(( number_1 - number_2 ))
 $ echo $(( number_1 * number_2 ))
 $ echo $(( number_1 / number_2 ))
 $ echo $(( number_1 % number_2 ))
You can also create a bash script for the above operations. For example we have a script operations.sh

#!/bin/bash
number_1=20
number_2=5
echo "Addition = $(( number_1 + number_2 ))"
echo "Subtraction = $(( number_1 - number_2 ))"
echo "Multiplication = $(( number_1 * number_2 ))"
echo "Division = $(( number_1 / number_2 ))"
echo "pre-increment = $(( ++number_1 ))"
echo "pre-decrement = $(( --number_2))"
now run the above script

$ chmod +x operations.sh
$ ./operations.sh
Output:

$ ./abc.sh
Addition = 25
Subtraction = 15
Multiplication = 100
Division = 4
pre-increment = 21
pre-decrement = 4
expr — evaluate expression
we can also use expr command to perform Arithmetic operations on numbers.
For example we have a script operations_expr.sh.

#!/bin/bash
number_1=20
number_2=5
echo "Addition = $(expr  $number_1 + $number_2 )"
echo "Subtraction = $(expr  $number_1 - $number_2 )"
echo "Multiplication = $(expr  $number_1 \* $number_2 )"
echo "Division = $(expr  $number_1 / $number_2 )"
now run the above script

$ chmod +x operations_expr.sh
$ ./operations_expr.sh
Output:

Addition = 25
Subtraction = 15
Multiplication = 100
Division = 4
#!/bin/bash
####################-----------Shell Scripting Tutorial for Beginners 11 - Floating point math operations in bash | bc Command-----#######
num1=20
num2=5

echo $(( num1 + num2 ))
echo $(( num1 - num2 ))
echo $(( num1 * num2 ))
echo $(( num1 / num2 ))
echo $(( num1 % num2 ))
____________________________________________________________________________________
echo $(expr $num1 + $num2 )
echo $(expr $num1 - $num2 )
echo $(expr $num1 \* $num2 )
echo $(expr $num1 / $num2 )
echo $(expr $num1 % $num2 )
#!/bin/bash
num1=20.5
num2=5
echo "20.5+5" | bc
#!/bin/bash
num1=20.5
num2=5
echo "20.5+5" | bc
echo "20.5-5" | bc
echo "20.5*5" | bc
echo "scale=2;20.5/5" | bc
echo "20.5%5" | bc
echo "$num1+$num2" | bc
echo "$num1-$num2" | bc
echo "$num1*$num2" | bc
echo "$num1/$num2" | bc
echo "$num1%$num2" | bc
num=4

echo "scale=2;sqrt($num)" | bc -l
echo "scale=2;3^3" | bc -l
#############----------------------Shell Scripting Tutorial for Beginners 12 - The case statement---------------
The Case Statement
The case statement is used to execute statements based on specific values. Often used in place of an if statement, if there are a large number of conditions.

Syntax:

case $var in
      val1)

            statements;;

      val2)

            statements;;

      *)

            statements;;

esac
In the above syntax:

Value used can be an expression
each set of statements must be ended by a pair of semicolons;
a *) is used to accept any value not matched with list of values
Example 1 :

#! /bin/bash
case $# in

4)

echo "Ready to process four files. " ;;

3)

echo "Ready to process three files." ;;

2)

echo "Ready to process two files." ;;

1)

echo  "Ready to process one file." ;;

*)

echo "Invalid number of filenames provided, " ;;

esac
In the above example, the statement block following the *) case is executed if the $# variable does not match any of the previous cases (4,3,2, or 1).
A double semicolon indicates the end of the statement block for each case.
The esac keyword (“case” spelled backward) is used to indicate the end of the case statement.
After one of the statement blocks in the case statement is executed (such as echo (“Ready to process four files. “), the next statement executed is the line after the esac keyword.
Example 2 :

#! /bin/bash

vehicle=$1

case $vehicle in
    "car" )
        echo "Rent of $vehicle is 100 dollar" ;;
    "van" )
        echo "Rent of $vehicle is 80 dollar" ;;
    "bicycle" )
        echo "Rent of $vehicle is 5 dollar" ;;
    "truck" )
        echo "Rent of $vehicle is 150 dollar" ;;
    * )
        echo "Unknown vehicle" ;;
esac
Output:

$ ./bash.sh
Unknown vehicle

$ ./bash.sh car
Rent of car is 100 dollar

$ ./bash.sh van
Rent of van is 80 dollar
Example 3 :

#!/bin/bash
  echo -n "Enter a number 1 < x < 10: "

  read -r x

      case $x in

            1) echo "Value of x is 1.";;

            2) echo "Value of x is 2.";;

            3) echo "Value of x is 3.";;

            4) echo "Value of x is 4.";;

            5) echo "Value of x is 5.";;

            6) echo "Value of x is 6.";;

            7) echo "Value of x is 7.";;

            8) echo "Value of x is 8.";;

            9) echo "Value of x is 9.";;

            0 | 10) echo "wrong number.";;

            *) echo "Unrecognized value.";;

      esac
Example 4 :

#! /bin/bash

echo -e "Enter some character : \c"
read value


case $value in
    [a-z] )
        echo "User entered $value a to z" ;;
    [A-Z] )
        echo "User entered $value A to Z" ;;
    [0-9] )
        echo "User entered $value 0 to 9" ;;
    ? )
        echo "User entered $value special character" ;;
    * )
        echo "Unknown input" ;;
esac
Output

test@test$ ./hello.sh 
Enter some character : f
User entered f a to z
test@test$ ./hello.sh 
Enter some character : K
User entered K a to z
test@test$ LANG=C
test@test$ ./hello.sh 
Enter some character : K
User entered K A to Z
test@test$ ./hello.sh 
Enter some character : 9
User entered 9 0 to 9
test@test$ ./hello.sh 
Enter some character : 5
User entered 5 0 to 9
test@test$ ./hello.sh 
Enter some character : &
User entered & special character
test@test$ ./hello.sh 
Enter some character : sdsdsdsd
Unknown input
[a-z] ) specifies a range which matches any lowercase letter from “a” to “z”
[A-Z] ) specifies a range which matches any lowercase letter from “A” to “Z”
[0-9] ) specifies a range which matches any value 0 to 9″ ;;
? )  Matches a string with exactly one character like a, !, and so on.
* ) Matches a string with one or more characters (a nonempty string).
--------------------------Shell Scripting Tutorial for Beginners 14 - Array variables----------------
An array is a variable containing multiple values. Any variable may be used as an array. There is no maximum limit to the size of an array, nor any requirement that member variables be indexed or assigned contiguously. Arrays are zero-based: the first element is indexed with the number 0.

Indirect declaration is done using the following syntax to declare a variable:
ARRAY[INDEXNR]=value
#!/bin/bash
os=('ubuntu' 'windows' 'kali')
os[3]='mac' #add elements to the array you can add any value with index number we chage and update also number value
unset os[2] # unset command use to remove an array in for the value

echo "${os[@]}"  # @ use for to print the array
echo "${os[0]}"  #to print a pacific value in array and give the index number of array
echo "${!os[@]}" #To print indices and indexes of number
echi "${#os[@]}" #  symbol used for to print of the length of array example-3

string=dasfsafsadfsfd
echo "${string[@]}"
echo "${string[0]}"
echo "${string[1]}"
echo "${#sting[@]}"
-----------------------Shell Scripting Tutorial for Beginners 15 - WHILE Loops-----------------
Loop is a block of code that is repeated a number of times. The repeating is performed either a pre-determined number of times until a particular condition is satisfied ( while and until loops)
To provide flexibility to the loop constructs there are also two statements namely break and continue are provided.
#!/bin/bash
while [ condition ]    # this is a syntax of while loops condition
do
    command1
    command2
    command3
done
#!/bin/bash
# while loops
d=1
while [ $d -le 10 ] or (( $d <= 10 )) 
do
    echo "$d"
    d=$(( d+1 ))  or (( ++d )) or (( d++ ))
done
--------------Shell Scripting Tutorial for Beginners 16 - using sleep and open terminal with WHILE Loops----------------
Loop is a block of code that is repeated a number of times. The repeating is performed either a pre-determined number of times until a particular condition is satisfied ( while and until loops)
To provide flexibility to the loop constructs there are also two statements namely break and continue are provided.
#!/bin/bash
n=1
while (( $n <= 10 ))
do
      echo "$n"
      (( ++n ))
      sleep 2     # use sleep command use to slow down the process
done
--------------------------------Shell Scripting Tutorial for Beginners 17 - Read a file content in Bash----------
How do I read a text file line by line under a Linux or UNIX-like system using BASH shell?
You can use while..do..done bash loop to read file line by line on a Linux, OSX, or Unix-like system.
There are basically three ways to read file content using bash.
1a: While loop: Single line at a time: Input redirection.
1b: While loop: Single line at a time:
Open the file, read from a file descriptor (in this case file descriptor #4).
2: While loop:  Read file into single variable and parse.
#!/bin/bash
cat hello.sh | While read p
do
   echo $p
done
#!/bin/bash
while read p    # this while loop use to read the file command p use to redirect
do
  echo $p
done < hello.sh   # this is a file name
#!/bin/bash
cat hello.sh | while read p         # read the file in a singal variable and print it
do
  echo $p
done                             
#!/bin/bash
while IFS=' ' read -r line  # flag and minus are prevents the blackslash escape from being interpreted right so this flag is going interpreted right so this flag is going to prevent backless escapes from being interpreted
do
  echo $line
done < hello.sh
#!/bin/bash
while IFS=' ' read -r line
do
  echo $line
done < hello.sh
---------------------------Shell Scripting Tutorial for Beginners 18 - UNTIL loop-----------------------
The until structure is very similar to the while structure. The until structure loops until the condition is true. So basically it is “until this condition is true, do this”.
#!/bin/bash
until [ condition ]  #syntax of until loop
do
   command1
   command2
   command3
   ......
   command5
   commandN
done
#!/bin/bash
n=1
until [ $n -gt 10 ]
do
  echo $n
  sleep 2
  n=$(( n+1 ))
done
#!/bin/bash
n=1
until (( $n > 10 ))
do
  echo $n
  sleep 2
  n=$(( n+1 ))
done
---------------------------Shell Scripting Tutorial for Beginners 19 - FOR loop-------------------
for Loops:   Sometimes we want to run a command (or group of commands) over and over.   This is called iteration, repetition, or looping.   The most commonly used shell repetition structure is the for loop, which has the general form: 
for variable in list
do
  command(s) 
done
#!/bin/bash
for variable in 1 2 3 4 5 . . .N
do
    command1
    command2
    command3
done
-------------######OR######--------------
for variable in file1 file2 file3
do
    command1 on $variable
    command2
    commandN
done
------------------#######OR######---------
for OUTPUT in $(Linux-or-Unix-command-here)
do
   command1 on $OUTPUT
   command2 on $OUTPUT
   commandN
done
---------------########OR########---------
for (( EXP1; EXP2; EXP3 ))
do
   command1
   command2
   command3
done
#!/bin/bash
for i in {1..100}
do
    echo $i
done
#!/bin/bash
for i in 1 2 3 4 5
do 
   echo $i
done
#!/bin/bash
for i in {1..100..2} #{START..END..INCREMENT}
do
    echo $i
done
#!/bin/bash
for (( i=0; i<5; i++ )) #i=equal to zero
do                      #i=is less than five
   echo $i              #i=increase the value of i
done
-------------------------Shell Scripting Tutorial for Beginners 20 - use FOR loop to execute commands------------
FOR loop to execute commands. A list of commands is executed for each value in the list.
for Loops:   Sometimes we want to run a command (or group of commands) over and over.   This is called iteration, repetition, or looping.   The most commonly used shell repetition structure is the for loop, which has the general form: 
for variable in list
do
  command(s) 
done
#!/bin/bash
for command in
do 
  echo $command 
done
#!/bin/bash
for command in ls pwd date
do
  echo "--------------$command-------------"
  $command
done
#!/bin/bash
for item in *  # AStrix i can iteration of a file and directory and AStris is a wald card
do
  if [ -d $item ] # -d all directory
  then
     echo $item
  fi
done
#!/bin/bash
for item in *  # AStrix i can iteration of a file and directory
do
  if [ -d $item ] # -d all directory
  then
     echo $item
  fi
done
---------------------------Shell Scripting Tutorial for Beginners 21 - Select loop------------
SELECT COMMAND Constructs simple menu from word list. It Allows user to enter a number instead of a word. So User enters sequence number corresponding to the word.
--------------------------------------------
Syntax:
select WORD in LIST     
do           
RESPECTIVE-COMMANDS
done 
--------------------------------------------
Loops until end of input, i.e. ^d  (or ^c)
#!/bin/bash
select varName in list     # basic syntax of select loop
do
   command1
   command2
   -------
   -------
   commandN
done
#!/bin/bash
select name in mark john tom ben
do
   echo "$name selected"
done
#!/bin/bash
select name in mark john tom ben
do
   case $name in
    mark)
      echo mark selected
      ;;
    john)
      echo john selected
      ;;
    tom)
      echo tom selected
      ;;
    ben)
      echo ben selected
      ;;
    *)
     echo "Error please provide the no.between 1..4"
   esac
done
---------------Shell Scripting Tutorial for Beginners 22 - Break and continue--------------
for (( i=1 ; i<=10 ; i++ ))
do
   if [ $i -eg 3 -o $i -eg 6 ]
   then
     continue
   fi
   echo "$i"
done
#!/bin/bash
for (( i=1 ; i<=10 ; i++ ))
do
   if [ $i -qt 5 ]
   then
      break
   fi
    echo "$i"
done
-------------------------Shell Scripting Tutorial for Beginners 23 - Functions-----------------
Functions :
Functions make scripts easier to maintain. Basically it breaks up the program into smaller pieces. A function performs an action defined by you, and it can return a value if you wish.















 
